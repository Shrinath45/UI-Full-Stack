JavaScript reference techniques to access HTML elements in page:

1. JavaScript can refer any HTML element by using DOM hierarchy
    - DOM hierarchy is the native method for the browser.
    - It is faster in access and render.
    - It uses a index number for element, which needs to update every time whenever the position of element changes in page.

    Syntax:
            window.document.images[]
            window.document.forms[].elements[]

    EX:
    <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
        function LoadPage(){
            window.document.images[0].src="./public/Images/women.jpg";
            window.document.forms[0].elements[1].value="Register";
            window.document.forms[1].elements[2].value="Login";
        }
    </script>
</head>
<body onload="LoadPage()">
    <div>
        <img height="200px" width="200px" border="1px">
    </div>
    <div>
        <form action="">
            <h3>Register</h3>
            <input type="text" placeholder="Your Mobile"> <input type="email" name="" id="" placeholder="Your Email"> <input type="button" value="">
        </form>
    </div>
    <div>
        <form action="">
            <h3>Login</h3>
            <input type="text" name="" id="" placeholder="User ID">
            <input type="password" name="" id="" placeholder="Password">
            <input type="button" value="">
        </form>
    </div>
</body>
</html>


2. JavaScript can refer HTML elements by using a reference name

    - Every element in page can have reference name.
    - JS can access element by using the reference name.

        <img name="poster">

        poster.src=" ";
    
    - You can't access a child element without referring to its parent element.
        <form name="form1">
            <input name="input1">
        </form> 

        form1.input1.value=" ";

- "name" attribute can have same value for different elements.
- Multiple elements in page can have same name, then it conflicts.

EX:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
        function LoadPage(){
            poster.src="./public/Images/women.jpg";
            frmRegister.btnRegister.value="Register";
            frmLogin.btnLogin.value="Login";
        }
    </script>
</head>
<body onload="LoadPage()">
    <div>
        <img height="200px" width="200px" border="1px" name="poster">
    </div>
    <div>
        <form action="" name="frmRegister">
            <h3>Register</h3>
            <input type="text" placeholder="Your Mobile"> <input type="email" name="" id="" placeholder="Your Email"> <input type="button" value="" name="btnRegister">
        </form>
    </div>
    <div>
        <form action="" name="frmLogin">
            <h3>Login</h3>
            <input type="text" name="" id="" placeholder="User ID">
            <input type="password" name="" id="" placeholder="Password">
            <input type="button" value="" name="btnLogin">
        </form>
    </div>
</body>
</html>


3. JavaScript can refer elements by using "id"

    - ID is an attribute used for unique reference.
    - Every element in page can have a different ID.
    - JavaScript can access elements with ID by using the document method

        document.getElemetnById()

    - You can access any child element without referring to its parent.

    Syntax:
        <img id="poster">
        <input type="button" id="btnRegister">

        document.getElemetnById("poster").src="";
        document.getElemetnById("btnRegister").value="";
    
    - "id" is used as reference of CSS selector.
    - In CSS "id" can be same for multiple elements, hence it conflicts with "ID".
    

EX:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
        function LoadPage(){
            
            document.getElementById("poster").src="./public/Images/kids.jpg";
            document.getElementById("btnRegister").value="Register";
            document.getElementById("btnLogin").value="Login";
        }
    </script>
</head>
<body onload="LoadPage()">
    <div>
        <img height="200px" width="200px" border="1px" name="poster" id="poster">
    </div>
    <div>
        <form action="" name="frmRegister">
            <h3>Register</h3>
            <input type="text" placeholder="Your Mobile"> <input type="email" name="" id="" placeholder="Your Email"> <input type="button" value="" name="btnRegister" id="btnRegister">
        </form>
    </div>
    <div>
        <form action="" name="frmLogin">
            <h3>Login</h3>
            <input type="text" name="" id="" placeholder="User ID">
            <input type="password" name="" id="" placeholder="Password">
            <input type="button" value="" name="btnLogin" id="btnLogin">
        </form>
    </div>
</body>
</html>
        

4. JavaScript can refer HTML element by using CSS selectors

    - CSS have various selectors to select HTML elements.
    - CSS selectors include
        a) Type
        b) Class
        c) ID
        d) Relational
        e) Structural etc...

    - javascript uses "document.querySelector()" method for referring selectors.

    Syntax:

        <img>
        <input type="button" Class="btn">
        <div id="container"

        document.querySelector("img").src="";
        document.querySelector(".btn").value="";
        document.querySelector("#container").className="";
        document.querySelector("input[type=button]").value="";
        document.querySelector("nav+span").value="";

EX:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
        function LoadPage(){
           
            document.querySelector("img").src="./public/Images/a1.png";
            document.querySelector("#btnRegister").value="Register";
            document.querySelector(".btn").value="Login";
        }
    </script>
</head>
<body onload="LoadPage()">
    <div>
        <img height="200px" width="200px" border="1px" name="poster" id="poster">
    </div>
    <div>
        <form action="" name="frmRegister">
            <h3>Register</h3>
            <input type="text" placeholder="Your Mobile"> <input type="email" name="" id="" placeholder="Your Email"> <input type="button" value="" name="btnRegister" id="btnRegister">
        </form>
    </div>
    <div>
        <form action="" name="frmLogin">
            <h3>Login</h3>
            <input type="text" name="" id="" placeholder="User ID">
            <input type="password" name="" id="" placeholder="Password">
            <input type="button" value="" name="btnLogin" id="btnLogin" class="btn">
        </form>
    </div>
</body>
</html>


Note: JavaScript provides various other methods to access multiple elements.
    
        document.getElementById()
        document.getElementByTagName()
        document.getElementByName()

        All methods return an "Array", which is a collection of elements.

        Syntax:    
                document.getElementById("btnRegister").length



                    JavaScript Output & Input methods
                    __________________________________

- A programming language handle communication between user and application.
- User makes a request and application send a response customized for client request.
- Request is made by using input methods.
- Response is sent using output methods.
- JavaScript input methods are:

        a) Query String
        b) Prompt()
        c) Form Input elements

- JavaScript output methods are

        a) alert()
        b) confirm()
        c) document.write()
        d) innerHTML
        e) innerText
        f) outerText
        g) textContent()
        h) console methods etc...